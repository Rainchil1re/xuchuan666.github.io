<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rainchilre</title>
    <description>前端开发工程师，很高兴在这里与你分享生活的点滴</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 26 Apr 2019 18:29:54 +0800</pubDate>
    <lastBuildDate>Fri, 26 Apr 2019 18:29:54 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>前端缓存</title>
        <description>&lt;h1 id=&quot;前端缓存&quot;&gt;前端缓存&lt;/h1&gt;
&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;在前端开发中无论PC还是移动端缓存策略对我们提升用户体验都很重要，特别是移动端好的缓存策略可以减少我们白屏时间、甚至离线使用，提升项目体验。&lt;/p&gt;
&lt;h2 id=&quot;主要内容&quot;&gt;主要内容&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#web缓存是什么&quot;&gt;web缓存是什么，为什么要使用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web缓存类型&quot;&gt;web缓存类型&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#浏览器缓存&quot;&gt;浏览器缓存&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#代理服务缓存&quot;&gt;代理服务器缓存&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#数据库缓存&quot;&gt;数据库缓存&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#应用层缓存&quot;&gt;应用层缓存&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#浏览器缓存基本知识&quot;&gt;浏览器缓存基本知识&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#expires&quot;&gt;Expires&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#last-modified&quot;&gt;Last-modified&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cache-control&quot;&gt;Cache-Control&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#etag&quot;&gt;ETag&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#浏览器缓存机制&quot;&gt;浏览器缓存机制&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#强缓存应用&quot;&gt;强缓存应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#协商缓存应用&quot;&gt;协商缓存应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#强缓存与协商缓存的区别&quot;&gt;强缓存与协商缓存的区别&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#浏览器缓存的流程&quot;&gt;浏览器缓存的流程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#浏览器缓存的优化&quot;&gt;浏览器缓存的优化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;web缓存是什么&quot;&gt;web缓存是什么&lt;/h2&gt;
&lt;p&gt;Web缓存是介于服务器与客户端之间。服务器可能是源服务器（因为中间可能会有代理服务器），就是网站资源所在的服务器。客户端指的是我们的浏览器。Web缓存就是在服务器和客户端之间搞监督，监督请求，并把请求的结果传给浏览器显示出来，另外存储一份（我们称为副本，也就是缓存）。然后，我们下次请求相同的URL路径，直接请求保存的副本（缓存），而不是再次向源服务器获取数据。&lt;/p&gt;

&lt;p&gt;缓存的好处：优秀的缓存策略可以缩短网页请求资源的距离，从而减少延迟时间，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。&lt;/p&gt;

&lt;h2 id=&quot;web缓存类型&quot;&gt;web缓存类型&lt;/h2&gt;
&lt;h3 id=&quot;浏览器缓存&quot;&gt;浏览器缓存&lt;/h3&gt;
&lt;p&gt;通过使用HTTP协议与服务器交互的时候，浏览器就会根据一套与服务器约定的规则进行缓存工作&lt;/p&gt;

&lt;h3 id=&quot;代理服务缓存&quot;&gt;代理服务缓存&lt;/h3&gt;
&lt;p&gt;代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。&lt;/p&gt;

&lt;h3 id=&quot;数据库缓存&quot;&gt;数据库缓存&lt;/h3&gt;
&lt;p&gt;当Web应用逻辑较为复杂，频繁进行数据库查询，很容易导致数据库不堪重荷。为了提高查询的性能，将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提高响应效率。&lt;/p&gt;

&lt;h3 id=&quot;应用层缓存&quot;&gt;应用层缓存&lt;/h3&gt;
&lt;p&gt;通过代码逻辑，把之前请求过的数据缓存起来，再次需要数据时通过逻辑上的处理选择可用的缓存的数据。&lt;/p&gt;

&lt;h2 id=&quot;浏览器缓存基本知识&quot;&gt;浏览器缓存基本知识&lt;/h2&gt;
&lt;p&gt;浏览器的缓存状态是由HTTP header决定的，header的参数有四种：Expires、Last-modified、Cache-Control、ETag&lt;/p&gt;

&lt;h3 id=&quot;expires&quot;&gt;Expires&lt;/h3&gt;
&lt;p&gt;缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。&lt;img src=&quot;/assets/img/expires.png&quot; alt=&quot;expires&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;last-modified&quot;&gt;Last-Modified&lt;/h3&gt;
&lt;p&gt;服务器端文件的最后修改时间，需要和Cache-Control共同使用，是检查服务器端资源是否更新的一种方式。当浏览器再次进行请求时，会向服务器传送If-Modified-Since报头，询问Last-Modified时间点之后资源是否被修改过。如果没有修改，则返回码为304，使用缓存；如果修改过，则再次去服务器请求资源，返回码和首次请求相同为200，资源为服务器最新资源。&lt;img src=&quot;/assets/img/last-modified.png&quot; alt=&quot;last-modified&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;etag&quot;&gt;Etag&lt;/h3&gt;
&lt;p&gt;ETag和Last-Modified也是一样的，是对文件进行标识的字段。不同的是，ETag是根据实体内容生成一段hash字符串，标识资源的状态，由服务端产生。在向服务器查询文件是否有更新时，浏览器通过If-None-Match字段把特征字串（hash字符串）发送给服务器，由服务器和文件最新特征字串进行匹配，来判断文件是否有更新。没有更新则返回304，有更新则返回200。ETag和Last-Modified可根据需求使用一个或两个同时使用。两个同时使用时，只要满足基中一个条件，就认为文件没有更新。&lt;/p&gt;
&lt;h3 id=&quot;4种参数对比&quot;&gt;4种参数对比&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Expires、Last-modified&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Cache-control、Etag&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;优先级低&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;优先级高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;较少的选择&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;功能更全、细致&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;浏览器缓存机制&quot;&gt;浏览器缓存机制&lt;/h2&gt;
&lt;h3 id=&quot;强缓存应用&quot;&gt;强缓存应用&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;浏览器第一次向服务器请求一个资源时，服务器返回这个资源的同时，在respone的header加上Expires的header；&lt;/li&gt;
  &lt;li&gt;浏览器在接收到这个资源后，会把这个资源连同所有response header一起缓存下来（所以符合条件的缓存请求返回的header并不是来自服务器，而是来自之前缓存的header）；&lt;/li&gt;
  &lt;li&gt;浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，拿出它的Expires跟当前的请求时间比较，如果请求时间在Expires指定的时间之前，就符合缓存要求，否则向服务器请求资源；&lt;/li&gt;
  &lt;li&gt;如果没有符合缓存的要求，浏览器直接从服务器加载资源时，Expires Header在重新加载的时候会被更新；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意：max-age是根据它第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就符合缓存要求，否则就不行。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;强缓存通常都是针对静态资源使用，动态资源需要慎用，除了服务端页面可以看作动态资源外，那些引用静态资源的html也可以看作是动态资源，如果这种html也被缓存，当这些html更新之后，可能就没有机制能够通知浏览器这些html有更新，尤其是前后端分离的应用里，页面都是纯html页面，每个访问地址可能都是直接访问html页面，这些页面通常不加强缓存，以保证浏览器访问这些页面时始终请求服务器最新的资源。&lt;/p&gt;
&lt;h3 id=&quot;协商缓存应用&quot;&gt;协商缓存应用&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified的header，这个header表示这个资源在服务器上的最后修改时间；&lt;/li&gt;
  &lt;li&gt;浏览器再次向服务器请求这个资源时，在request的header上加上If-Modified-Since的header，这个header的值就是上一次请求时返回的Last-Modified的值；&lt;img src=&quot;/assets/img/if-modified-since.png&quot; alt=&quot;expires&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;服务器再次收到资源请求时，根据浏览器传过来If-Modified-Since和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回304 Not Modified的响应时，response header中不会再添加Last-Modified的header，因为既然资源没有变化，那么Last-Modified也就不会改变，这是服务器返回304时的response header；&lt;/li&gt;
  &lt;li&gt;浏览器收到304的响应后，就会从缓存中加载资源；&lt;/li&gt;
  &lt;li&gt;如果不符合协商缓存要求，浏览器直接从服务器加载资源时，Last-Modified Header在重新加载的时候会被更新，下次请求时，If-Modified-Since会启用上次返回的Last-Modified值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Last-Modified和If-Modified-Since都是根据服务器时间返回的header，一般来说，在没有调整服务器时间和篡改客户端缓存的情况下，这两个header配合起来管理协商缓存是非常可靠的，但是有时候也会服务器上资源其实有变化，但是最后修改时间却没有变化的情况，而这种问题又很不容易被定位出来，而当这种情况出现的时候，就会影响协商缓存的可靠性。所以就有了另外一对header来管理协商缓存，这对header就是ETag和If-None-Match。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;浏览器第一次向服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上ETag的header，这个header是服务器根据当前请求的资源生成的一个唯一标识，这个唯一标识是一个字符串，只要资源有变化这个串就不同，跟最后修改时间没有关系，所以能很好的补充Last-Modified的问题；&lt;/li&gt;
  &lt;li&gt;浏览器再次跟服务器请求这个资源时，在request的header上加上If-None-Match的header，这个header的值就是上一次请求时返回的ETag的值；&lt;/li&gt;
  &lt;li&gt;服务器再次收到资源请求时，根据浏览器传过来If-None-Match和然后再根据资源生成一个新的ETag，如果这两个值相同就说明资源没有变化，否则就是有变化；如果没有变化则返回304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化；&lt;/li&gt;
  &lt;li&gt;浏览器收到304的响应后，就会从缓存中加载资源；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意：大部分Web服务器都默认开启协商缓存，而且是同时启用Last-Modified和If-Modified-Since、ETag和If-None-Match这也是为了处理Last-Modified不可靠的情况；
协商缓存需要配合强缓存使用，因为如果不启用强缓存的话，协商缓存根本没有意义；&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;强缓存与协商缓存的区别&quot;&gt;强缓存与协商缓存的区别&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;共同点：如果符合条件，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不同点：强缓存不发送请求到服务器，协商缓存会发送请求到服务器；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;浏览器缓存的流程&quot;&gt;浏览器缓存的流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/web-cache.png&quot; alt=&quot;avatar&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;浏览器缓存的优化&quot;&gt;浏览器缓存的优化&lt;/h2&gt;
&lt;p&gt;Last-Modified 需要向服务器发起查询请求，才能知道资源文件有没有更新。虽然服务器可能返回304告诉没有更新，但也还有一个请求的过程。对于移动网络，这个请求可能是比较耗时的。有一种说法叫“消灭304”，指的就是优化掉304的请求。&lt;/p&gt;

&lt;p&gt;在实际应用中，为了解决 Cache-Control 缓存时长不好设置的问题，以及为了”消灭304“，Web前端采用的方式是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在要缓存的资源文件名中加上文件MD5值字串，如 common.d5d02a02.css，同时设置 Cache-Control:max-age=31536000，也就是一年。在一年时间内，资源文件如果本地有缓存，就会使用缓存；也就不会有304的回包。&lt;/li&gt;
  &lt;li&gt;如果资源文件有修改，则更新文件内容，同时修改资源文件名，如 common.d5d02a02.cs，html页面就会引用新的资源文件名。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 26 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/26/web-cache.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/26/web-cache.html</guid>
        
        <category>前端</category>
        
        <category>缓存</category>
        
        
        <category>web-cache</category>
        
      </item>
    
      <item>
        <title>前端异常监控初步方案</title>
        <description>&lt;h2 id=&quot;前端监控xc&quot;&gt;前端监控xc&lt;/h2&gt;
&lt;p&gt;在线上项目中需要统计产品中用户行为和使用情况，从而可以从用户和产品可以从用户和产品的角度去了解用户群体，从而升级和迭代产品，使其更加贴近用户。这些数据可以通过前端监控的方式获得。&lt;/p&gt;

&lt;p&gt;目前我们需要关注的前端监控包括：异常监控和性能监控。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;异常监控：前端代码的执行环境非常复杂，即使经过各种测试的线上代码，也很难保证在不同的浏览器环境下不出现问题，而且有些问题往往因为浏览器以及操作的问题，难以复现。所以，我们需要收集前端异常信息，以方便开发定位以及还原错误信息。&lt;/li&gt;
  &lt;li&gt;性能监控：监听前端的性能，主要包括监听网页或者说产品在用户端的体验。加载的延迟、操作的卡顿等都会影响用户的使用体验。尤其是移动端，用户对页面响应延迟和连接中断的容忍度很低。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而且，对于一个成熟的前端体系而言，一个可靠的前端异常以及性能数据采集、上报、处理、监控、报警平台也是非常有必要的。&lt;/p&gt;

&lt;h2 id=&quot;监控数据&quot;&gt;监控数据&lt;/h2&gt;
&lt;p&gt;根据目前了解到的需求，我们需要监控的数据如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ajax/Fetch错误
  在前端异常中，经常容易出现请求错误，这种情况下保存请求上下文对于问题排查就相当重要了。对于react技术栈，我们可以在http中使用专门的中间件来处理,对于jquery技术栈中，我们可以通过代理ajax接口来实现。&lt;/li&gt;
  &lt;li&gt;Promise错误
  通过Promise可以帮助我们解决异步回调地狱的问题，但是一旦Promise实例抛出异常而你没有用catch去捕获的话，onerror或try-catch也无能为力，无法捕捉到错误。&lt;/li&gt;
  &lt;li&gt;window.onerror错误
 window.onerror能够捕获全局异常，无论是异步还是非异步错误，onerror都能捕获到运行时错误。&lt;/li&gt;
  &lt;li&gt;静态资源加载错误
 对于静态资源加载错误，将严重影响用户使用以及体验，需要区别出来。&lt;/li&gt;
  &lt;li&gt;自定义错误
  部分业务中需要收集关键的错误数据。&lt;/li&gt;
  &lt;li&gt;用户行为
 一般线上代码出现问题，除了兼容性问题，一般都比较难于复现，因为线上代码上线之前就已经经过过多重测试。这种情况下，记录用户出错之前的操作行为，将对于问题重现非常有用。对于前端而言，我们需要记录ajax请求，click操作等。&lt;/li&gt;
  &lt;li&gt;性能数据
 对于h5等移动项目，需要关注性能数据，包括首屏时间、页面加载所有资源完成时间、页面是否崩溃、页面是否卡顿等等，可以通过浏览器相关性能接口获取。&lt;/li&gt;
  &lt;li&gt;其他数据
 为了帮助管理和了解团队所有项目的运行情况，我们需要新增一些上报数据，如：用户浏览器信息、用户访问项目频次、各组各项目异常统计。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;上报策略&quot;&gt;上报策略&lt;/h2&gt;
&lt;p&gt;对于不同的业务项目，上报的策略不同，sdk需要支持多种上报方式。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;实时上报&lt;/li&gt;
  &lt;li&gt;合并上报&lt;/li&gt;
  &lt;li&gt;错误过滤&lt;/li&gt;
  &lt;li&gt;最大阈值&lt;/li&gt;
  &lt;li&gt;上报频率&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;数据节流&quot;&gt;数据节流&lt;/h2&gt;
&lt;p&gt;一个错误发生时候，上报的数据量还是蛮大的，如果一个异常一直重复发生，连续不断向服务器轰炸，既是数据冗余，也造成流量浪费，由于上报的错误都是字符串，我们可以通过字符串压缩类工具库来实现数据节流比如：&lt;a href=&quot;https://github.com/pieroxy/lz-string&quot;&gt;lz-string&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;离线存储&quot;&gt;离线存储&lt;/h2&gt;
&lt;p&gt;对于部分项目可能需要关闭错误上报，这种情况下，可以将所有数据都缓存在客户端，我们提供错误还原页面还原具体信息，另外，数据上报难免可能存在丢失情况，离线存储也可以保存更详细的错误信息，更精确的还原数据。&lt;/p&gt;

&lt;h2 id=&quot;数据上报&quot;&gt;数据上报&lt;/h2&gt;
&lt;p&gt;数据上报普通的我们可以通过new Image或者发送ajax请求来实现，上报内容具体包括以下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;浏览器信息&lt;/li&gt;
  &lt;li&gt;错误类型（加载错误/js错误）&lt;/li&gt;
  &lt;li&gt;错误发生页面URL&lt;/li&gt;
  &lt;li&gt;错误发生时间戳&lt;/li&gt;
  &lt;li&gt;用户信息&lt;/li&gt;
  &lt;li&gt;用户行为&lt;/li&gt;
  &lt;li&gt;token&lt;/li&gt;
  &lt;li&gt;客户端类型（pc/mobile）&lt;/li&gt;
  &lt;li&gt;分辨率&lt;/li&gt;
  &lt;li&gt;页面来源&lt;/li&gt;
  &lt;li&gt;错误列&lt;/li&gt;
  &lt;li&gt;错误行&lt;/li&gt;
  &lt;li&gt;错误级别&lt;/li&gt;
  &lt;li&gt;错误js文件url&lt;/li&gt;
  &lt;li&gt;扩展信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构设计&quot;&gt;架构设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/web-exception.png&quot; alt=&quot;avatar&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;捕获数据
  目前主流的监控工具库如：badjs, jstracker, sentry, saiji等。经过初步调研之后，认为&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;sentry&lt;/a&gt;能够匹配我们的监控求。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;sentry&lt;/a&gt;是一个专注于错误上报的跨平台应用监控，有针对浏览器实现的库即raven-js但sentry并不能完全满足我们的监控需求，我们需要对此进行扩展。
 实现捕获上述数据的基本原理如下：&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Ajax/Fetch错误-通过代理原生的XMLHttpRequest对象及其prototype属性上的方法和对于原生支持的Fetch方法，来实现对http请求调用的拦截。
 这样一来，用户对http的请求操作以及请求响应都会被记录和处理的。&lt;/li&gt;
      &lt;li&gt;Promise错误-通过window.onunhandledrejection捕获Promise被reject但是没有catch的异常，并得到一些关于异常的信息。&lt;/li&gt;
      &lt;li&gt;window.onerror错误-通过在window.onerror上定义一个事件监听函数，程序中其他代码产生的未被捕获的异常往往就会被window.onerror上面注册
 的监听函数捕获到。并且同时捕获到一些关于异常的信息。&lt;/li&gt;
      &lt;li&gt;静态资源加载错误-sentry本身并没有提供对该异常的捕获，需要我们扩展该功能，即通过window.addEventListener(‘error’,callback,true)方式捕获。&lt;/li&gt;
      &lt;li&gt;用户行为-通过拦截http请求，监听页面路由，代理EventTarget及其prototype属性上的方法拦截用户如点击等操作的行为，这样一来，可以很完整
 的记录用户以及页面的行为。&lt;/li&gt;
      &lt;li&gt;性能数据-sentry本身并不关注性能数据的收集，需要我们扩展该功能，即通过Performance API获取页面加载的性能&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;上报数据
 sentry本身是将捕获的数据立即上报，考虑性能、流量浪费、数据丢失、数据冗余等，我们需要对上报过程做一些处理，以更好的满足监控能够在项目中广泛
  地应用。
    &lt;ol&gt;
      &lt;li&gt;避免频繁上报-即通过延时，且时间满足或达到数据量上限之后将这段时间内的所有数据合并为一次上报。&lt;/li&gt;
      &lt;li&gt;避免数据丢失-即把捕获的数据立即存储到本地，存储的方式优先使用indexedDB并降级使用localstorage,确保数据能够离线缓存。&lt;/li&gt;
      &lt;li&gt;避免数据冗余-即把捕获的数据和页面运行期内缓存的数据比较并去重，能够最大限度的减少重复的数据上报。&lt;/li&gt;
      &lt;li&gt;避免流量浪费-由于上报的数据包含大量的信息如用户操作行为、异常信息等，通过上报前的数据压缩处理，能够极大的提高宽带利用率。&lt;/li&gt;
      &lt;li&gt;对接监控分析平台和可视化统计分析平台-即数据上报前，需要进行数据处理才能够与相应的分析平台对接，才能够利用分析平台解决我们的问题。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Node Server中间层
 我们通过Node Server给前端监控提供接口服务，这样设计的意义有：
    &lt;ol&gt;
      &lt;li&gt;与数据分析平台解耦，数据分析平台只需关心数据展示即可。&lt;/li&gt;
      &lt;li&gt;由于目前前端开发中，源码都是经过压缩处理，我们需要对上报的异常数据通过Source-map还原，才能进行异常定位。&lt;/li&gt;
      &lt;li&gt;将上报的数据通过log4js存储到日志系统里，完成数据存储。&lt;/li&gt;
      &lt;li&gt;通过这样一个中间平台，我们可以做更多的事情，如：统计各组各项目异常等。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;监控分析平台
    &lt;ol&gt;
      &lt;li&gt;监控数据分析平台
 这是异常上报数据的分析平台。通过该平台我们可以查看项目的异常日志，定位分析异常，帮助我们解决异常；还有一个非常重要的功能，可以配置告警，能够帮助我们及时先于客户感知异常，等等。&lt;/li&gt;
      &lt;li&gt;可视化统计分析平台
 这是性能上报数据的分析平台，我们可以通过echarts、Highcharts、Grafana等可视化工具来搭建，通过该平台我们可以很直接地了解项目的性能，帮助我们分析页面性能；了解各个项目的用户浏览器占比，以帮助我们做兼容决策；了解各项目用户访问频次和各组各项目异常统计，以帮助团队管理项目，等等。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;目前监控系统已经广泛应用在团队各项目中，并帮助很多项目及时找到难以通过测试发现的bug,极大的保证了项目线上运行的稳定性。通过收集的性能等其他数据，对了解项目性能、了项目运行情况，管理项目等提供了很大的帮助，也方便团队做技术决策。&lt;/p&gt;

</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/25/web-expection.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/25/web-expection.html</guid>
        
        <category>前端</category>
        
        
        <category>web-exception</category>
        
      </item>
    
  </channel>
</rss>
