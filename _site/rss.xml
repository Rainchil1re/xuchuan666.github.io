<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>徐川的独立博客</title>
    <description>前端开发工程师，很高兴在这里与你分享生活的点滴</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 25 Apr 2019 17:31:34 +0800</pubDate>
    <lastBuildDate>Thu, 25 Apr 2019 17:31:34 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>前端异常监控初步方案</title>
        <description>&lt;h2 id=&quot;前端监控&quot;&gt;前端监控&lt;/h2&gt;
&lt;p&gt;在线上项目中需要统计产品中用户行为和使用情况，从而可以从用户和产品可以从用户和产品的角度去了解用户群体，从而升级和迭代产品，使其更加贴近用户。这些数据可以通过前端监控的方式获得。&lt;/p&gt;

&lt;p&gt;目前我们需要关注的前端监控包括：异常监控和性能监控。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;异常监控：前端代码的执行环境非常复杂，即使经过各种测试的线上代码，也很难保证在不同的浏览器环境下不出现问题，而且有些问题往往因为浏览器以及操作的问题，难以复现。所以，我们需要收集前端异常信息，以方便开发定位以及还原错误信息。&lt;/li&gt;
  &lt;li&gt;性能监控：监听前端的性能，主要包括监听网页或者说产品在用户端的体验。加载的延迟、操作的卡顿等都会影响用户的使用体验。尤其是移动端，用户对页面响应延迟和连接中断的容忍度很低。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而且，对于一个成熟的前端体系而言，一个可靠的前端异常以及性能数据采集、上报、处理、监控、报警平台也是非常有必要的。&lt;/p&gt;

&lt;h2 id=&quot;监控数据&quot;&gt;监控数据&lt;/h2&gt;
&lt;p&gt;根据目前了解到的需求，我们需要监控的数据如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ajax/Fetch错误
  在前端异常中，经常容易出现请求错误，这种情况下保存请求上下文对于问题排查就相当重要了。对于react技术栈，我们可以在http中使用专门的中间件来处理,对于jquery技术栈中，我们可以通过代理ajax接口来实现。&lt;/li&gt;
  &lt;li&gt;Promise错误
  通过Promise可以帮助我们解决异步回调地狱的问题，但是一旦Promise实例抛出异常而你没有用catch去捕获的话，onerror或try-catch也无能为力，无法捕捉到错误。&lt;/li&gt;
  &lt;li&gt;window.onerror错误
 window.onerror能够捕获全局异常，无论是异步还是非异步错误，onerror都能捕获到运行时错误。&lt;/li&gt;
  &lt;li&gt;静态资源加载错误
 对于静态资源加载错误，将严重影响用户使用以及体验，需要区别出来。&lt;/li&gt;
  &lt;li&gt;自定义错误
  部分业务中需要收集关键的错误数据。&lt;/li&gt;
  &lt;li&gt;用户行为
 一般线上代码出现问题，除了兼容性问题，一般都比较难于复现，因为线上代码上线之前就已经经过过多重测试。这种情况下，记录用户出错之前的操作行为，将对于问题重现非常有用。对于前端而言，我们需要记录ajax请求，click操作等。&lt;/li&gt;
  &lt;li&gt;性能数据
 对于h5等移动项目，需要关注性能数据，包括首屏时间、页面加载所有资源完成时间、页面是否崩溃、页面是否卡顿等等，可以通过浏览器相关性能接口获取。&lt;/li&gt;
  &lt;li&gt;其他数据
 为了帮助管理和了解团队所有项目的运行情况，我们需要新增一些上报数据，如：用户浏览器信息、用户访问项目频次、各组各项目异常统计。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;上报策略&quot;&gt;上报策略&lt;/h2&gt;
&lt;p&gt;对于不同的业务项目，上报的策略不同，sdk需要支持多种上报方式。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;实时上报&lt;/li&gt;
  &lt;li&gt;合并上报&lt;/li&gt;
  &lt;li&gt;错误过滤&lt;/li&gt;
  &lt;li&gt;最大阈值&lt;/li&gt;
  &lt;li&gt;上报评率&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;数据节流&quot;&gt;数据节流&lt;/h2&gt;
&lt;p&gt;一个错误发生时候，上报的数据量还是蛮大的，如果一个异常一直重复发生，连续不断向服务器轰炸，既是数据冗余，也造成流量浪费，由于上报的错误都是字符串，我们可以通过字符串压缩类工具库来实现数据节流比如：&lt;a href=&quot;https://github.com/pieroxy/lz-string&quot;&gt;lz-string&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;离线存储&quot;&gt;离线存储&lt;/h2&gt;
&lt;p&gt;对于部分项目可能需要关闭错误上报，这种情况下，可以将所有数据都缓存在客户端，我们提供错误还原页面还原具体信息，另外，数据上报难免可能存在丢失情况，离线存储也可以保存更详细的错误信息，更精确的还原数据。&lt;/p&gt;

&lt;h2 id=&quot;数据上报&quot;&gt;数据上报&lt;/h2&gt;
&lt;p&gt;数据上报普通的我们可以通过new Image或者发送ajax请求来实现，上报内容具体包括以下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;浏览器信息&lt;/li&gt;
  &lt;li&gt;错误类型（加载错误/js错误）&lt;/li&gt;
  &lt;li&gt;错误发生页面URL&lt;/li&gt;
  &lt;li&gt;错误发生时间戳&lt;/li&gt;
  &lt;li&gt;用户信息&lt;/li&gt;
  &lt;li&gt;用户行为&lt;/li&gt;
  &lt;li&gt;token&lt;/li&gt;
  &lt;li&gt;客户端类型（pc/mobile）&lt;/li&gt;
  &lt;li&gt;分辨率&lt;/li&gt;
  &lt;li&gt;页面来源&lt;/li&gt;
  &lt;li&gt;错误列&lt;/li&gt;
  &lt;li&gt;错误行&lt;/li&gt;
  &lt;li&gt;错误级别&lt;/li&gt;
  &lt;li&gt;错误js文件url&lt;/li&gt;
  &lt;li&gt;扩展信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构设计&quot;&gt;架构设计&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/exception.png&quot; alt=&quot;avatar&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;捕获数据
  目前主流的监控工具库如：badjs, jstracker, sentry, saiji等。经过初步调研之后，认为&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;sentry&lt;/a&gt;能够匹配我们的监控求。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;sentry&lt;/a&gt;是一个专注于错误上报的跨平台应用监控，有针对浏览器实现的库即raven-js但sentry并不能完全满足我们的监控需求，我们需要对此进行扩展。
 实现捕获上述数据的基本原理如下：&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Ajax/Fetch错误-通过代理原生的XMLHttpRequest对象及其prototype属性上的方法和对于原生支持的Fetch方法，来实现对http请求调用的拦截。
 这样一来，用户对http的请求操作以及请求响应都会被记录和处理的。&lt;/li&gt;
      &lt;li&gt;Promise错误-通过window.onunhandledrejection捕获Promise被reject但是没有catch的异常，并得到一些关于异常的信息。&lt;/li&gt;
      &lt;li&gt;window.onerror错误-通过在window.onerror上定义一个事件监听函数，程序中其他代码产生的未被捕获的异常往往就会被window.onerror上面注册
 的监听函数捕获到。并且同时捕获到一些关于异常的信息。&lt;/li&gt;
      &lt;li&gt;静态资源加载错误-sentry本身并没有提供对该异常的捕获，需要我们扩展该功能，即通过window.addEventListener(‘error’,callback,true)方式捕获。&lt;/li&gt;
      &lt;li&gt;用户行为-通过拦截http请求，监听页面路由，代理EventTarget及其prototype属性上的方法拦截用户如点击等操作的行为，这样一来，可以很完整
 的记录用户以及页面的行为。&lt;/li&gt;
      &lt;li&gt;性能数据-sentry本身并不关注性能数据的收集，需要我们扩展该功能，即通过Performance API获取页面加载的性能&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;上报数据
 sentry本身是将捕获的数据立即上报，考虑性能、流量浪费、数据丢失、数据冗余等，我们需要对上报过程做一些处理，以更好的满足监控能够在项目中广泛
  地应用。
    &lt;ol&gt;
      &lt;li&gt;避免频繁上报-即通过延时，且时间满足或达到数据量上限之后将这段时间内的所有数据合并为一次上报。&lt;/li&gt;
      &lt;li&gt;避免数据丢失-即把捕获的数据立即存储到本地，存储的方式优先使用indexedDB并降级使用localstorage,确保数据能够离线缓存。&lt;/li&gt;
      &lt;li&gt;避免数据冗余-即把捕获的数据和页面运行期内缓存的数据比较并去重，能够最大限度的减少重复的数据上报。&lt;/li&gt;
      &lt;li&gt;避免流量浪费-由于上报的数据包含大量的信息如用户操作行为、异常信息等，通过上报前的数据压缩处理，能够极大的提高宽带利用率。&lt;/li&gt;
      &lt;li&gt;对接监控分析平台和可视化统计分析平台-即数据上报前，需要进行数据处理才能够与相应的分析平台对接，才能够利用分析平台解决我们的问题。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Node Server中间层
 我们通过Node Server给前端监控提供接口服务，这样设计的意义有：
    &lt;ol&gt;
      &lt;li&gt;与数据分析平台解耦，数据分析平台只需关心数据展示即可。&lt;/li&gt;
      &lt;li&gt;由于目前前端开发中，源码都是经过压缩处理，我们需要对上报的异常数据通过Source-map还原，才能进行异常定位。&lt;/li&gt;
      &lt;li&gt;将上报的数据通过log4js存储到日志系统里，完成数据存储。&lt;/li&gt;
      &lt;li&gt;通过这样一个中间平台，我们可以做更多的事情，如：统计各组各项目异常等。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;监控分析平台
    &lt;ol&gt;
      &lt;li&gt;监控数据分析平台
 这是异常上报数据的分析平台。通过该平台我们可以查看项目的异常日志，定位分析异常，帮助我们解决异常；还有一个非常重要的功能，可以配置告警，能够帮助我们及时先于客户感知异常，等等。&lt;/li&gt;
      &lt;li&gt;可视化统计分析平台
 这是性能上报数据的分析平台，我们可以通过echarts、Highcharts、Grafana等可视化工具来搭建，通过该平台我们可以很直接地了解项目的性能，帮助我们分析页面性能；了解各个项目的用户浏览器占比，以帮助我们做兼容决策；了解各项目用户访问频次和各组各项目异常统计，以帮助团队管理项目，等等。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;目前监控系统已经广泛应用在团队各项目中，并帮助很多项目及时找到难以通过测试发现的bug,极大的保证了项目线上运行的稳定性。通过收集的性能等其他数据，对了解项目性能、了项目运行情况，管理项目等提供了很大的帮助，也方便团队做技术决策。&lt;/p&gt;

</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/25/test.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/25/test.html</guid>
        
        <category>前端</category>
        
        
        <category>test</category>
        
      </item>
    
  </channel>
</rss>
